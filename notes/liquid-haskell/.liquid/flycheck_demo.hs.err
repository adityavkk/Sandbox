{"o_vars":null,"o_types":[[{"spanInfo":{"startLine":137,"endLine":137,"endCol":32,"startCol":31,"filename":"/Users/akumarakrishnan/Documents/dev/Sandbox/notes/liquid-haskell/flycheck_demo.hs"},"realSpan":true},[[null,"x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 - x2}"]]],[{"spanInfo":{"startLine":33,"endLine":33,"endCol":19,"startCol":6,"filename":"/Users/akumarakrishnan/Documents/dev/Sandbox/notes/liquid-haskell/flycheck_demo.hs"},"realSpan":true},[["lq_anf$##7205759403792802355","[GHC.Integer.Type.Integer]"]]],[{"spanInfo":{"startLine":33,"endLine":33,"endCol":3,"startCol":1,"filename":"/Users/akumarakrishnan/Documents/dev/Sandbox/notes/liquid-haskell/flycheck_demo.hs"},"realSpan":true},[["Main.y'","GHC.Integer.Type.Integer"]]],[{"spanInfo":{"startLine":137,"endLine":137,"endCol":20,"startCol":13,"filename":"/Users/akumarakrishnan/Documents/dev/Sandbox/notes/liquid-haskell/flycheck_demo.hs"},"realSpan":true},[["lq_anf$##7205759403792802386","a##xo"]]],[{"spanInfo":{"startLine":137,"endLine":137,"endCol":44,"startCol":37,"filename":"/Users/akumarakrishnan/Documents/dev/Sandbox/notes/liquid-haskell/flycheck_demo.hs"},"realSpan":true},[["lq_anf$##7205759403792802389","[a##xo]"]]],[{"spanInfo":{"startLine":136,"endLine":136,"endCol":5,"startCol":1,"filename":"/Users/akumarakrishnan/Documents/dev/Sandbox/notes/liquid-haskell/flycheck_demo.hs"},"realSpan":true},[["Main.take","forall a##xo .\nx1:{v : GHC.Types.Int | v >= 0}\n-> {v : [a##xo] | x1 <= len v}\n   -> {ys : [a##xo] | x1 == len ys}"]]],[{"spanInfo":{"startLine":130,"endLine":130,"endCol":17,"startCol":12,"filename":"/Users/akumarakrishnan/Documents/dev/Sandbox/notes/liquid-haskell/flycheck_demo.hs"},"realSpan":true},[["lq_anf$##7205759403792802421","GHC.Types.Bool"]]],[{"spanInfo":{"startLine":121,"endLine":121,"endCol":54,"startCol":8,"filename":"/Users/akumarakrishnan/Documents/dev/Sandbox/notes/liquid-haskell/flycheck_demo.hs"},"realSpan":true},[["lq_anf$##7205759403792802405","GHC.Types.Int"]]],[{"spanInfo":{"startLine":141,"endLine":141,"endCol":5,"startCol":1,"filename":"/Users/akumarakrishnan/Documents/dev/Sandbox/notes/liquid-haskell/flycheck_demo.hs"},"realSpan":true},[["Main.tail","forall a##xo .\nx1:{v : [a##xo] | 1 <= len v}\n-> {ys : [a##xo] | len x1 - 1 == len ys}"]]],[{"spanInfo":{"startLine":130,"endLine":130,"endCol":26,"startCol":25,"filename":"/Users/akumarakrishnan/Documents/dev/Sandbox/notes/liquid-haskell/flycheck_demo.hs"},"realSpan":true},[[null,"x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 - x2}"]]],[{"spanInfo":{"startLine":1,"endLine":1,"endCol":1,"startCol":1,"filename":"/Users/akumarakrishnan/Documents/dev/Sandbox/notes/liquid-haskell/flycheck_demo.hs"},"realSpan":true},[["Main.$trModule","GHC.Types.Module"]]],[{"spanInfo":{"startLine":130,"endLine":130,"endCol":15,"startCol":14,"filename":"/Users/akumarakrishnan/Documents/dev/Sandbox/notes/liquid-haskell/flycheck_demo.hs"},"realSpan":true},[[null,"x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Bool | v <=> x1 < x2}"]]],[{"spanInfo":{"startLine":137,"endLine":137,"endCol":34,"startCol":29,"filename":"/Users/akumarakrishnan/Documents/dev/Sandbox/notes/liquid-haskell/flycheck_demo.hs"},"realSpan":true},[["lq_anf$##7205759403792802388","GHC.Types.Int"]]],[{"spanInfo":{"startLine":137,"endLine":137,"endCol":45,"startCol":23,"filename":"/Users/akumarakrishnan/Documents/dev/Sandbox/notes/liquid-haskell/flycheck_demo.hs"},"realSpan":true},[["lq_anf$##7205759403792802390","[a##xo]"]]],[{"spanInfo":{"startLine":130,"endLine":130,"endCol":4,"startCol":1,"filename":"/Users/akumarakrishnan/Documents/dev/Sandbox/notes/liquid-haskell/flycheck_demo.hs"},"realSpan":true},[["Main.abs","GHC.Types.Int\n-> {n : GHC.Types.Int | 0 <= n}"]]],[{"spanInfo":{"startLine":10,"endLine":10,"endCol":19,"startCol":14,"filename":"/Users/akumarakrishnan/Documents/dev/Sandbox/notes/liquid-haskell/flycheck_demo.hs"},"realSpan":true},[[null,"[GHC.Types.Char]\n-> a##xo"]]],[{"spanInfo":{"startLine":150,"endLine":150,"endCol":4,"startCol":1,"filename":"/Users/akumarakrishnan/Documents/dev/Sandbox/notes/liquid-haskell/flycheck_demo.hs"},"realSpan":true},[["Main.bad","(Main.OrdList GHC.Integer.Type.Integer)"]]],[{"spanInfo":{"startLine":130,"endLine":130,"endCol":35,"startCol":9,"filename":"/Users/akumarakrishnan/Documents/dev/Sandbox/notes/liquid-haskell/flycheck_demo.hs"},"realSpan":true},[["lq_anf$##7205759403792802422","GHC.Types.Bool"]]],[{"spanInfo":{"startLine":130,"endLine":130,"endCol":6,"startCol":5,"filename":"/Users/akumarakrishnan/Documents/dev/Sandbox/notes/liquid-haskell/flycheck_demo.hs"},"realSpan":true},[["x","GHC.Types.Int"]]],[{"spanInfo":{"startLine":149,"endLine":149,"endCol":5,"startCol":1,"filename":"/Users/akumarakrishnan/Documents/dev/Sandbox/notes/liquid-haskell/flycheck_demo.hs"},"realSpan":true},[["Main.good","(Main.OrdList GHC.Integer.Type.Integer)"]]],[{"spanInfo":{"startLine":130,"endLine":130,"endCol":28,"startCol":23,"filename":"/Users/akumarakrishnan/Documents/dev/Sandbox/notes/liquid-haskell/flycheck_demo.hs"},"realSpan":true},[["lq_anf$##7205759403792802423","{v : GHC.Types.Int | v == 0}"]]],[{"spanInfo":{"startLine":137,"endLine":137,"endCol":35,"startCol":23,"filename":"/Users/akumarakrishnan/Documents/dev/Sandbox/notes/liquid-haskell/flycheck_demo.hs"},"realSpan":true},[["Main.take","forall a##xo .\nx1:{v : GHC.Types.Int | v >= 0}\n-> {v : [a##xo] | x1 <= len v}\n   -> {ys : [a##xo] | x1 == len ys}"]]],[{"spanInfo":{"startLine":32,"endLine":32,"endCol":13,"startCol":6,"filename":"/Users/akumarakrishnan/Documents/dev/Sandbox/notes/liquid-haskell/flycheck_demo.hs"},"realSpan":true},[["lq_anf$##7205759403792802350","{v : [a##xo] | len v == 0}"]]],[{"spanInfo":{"startLine":10,"endLine":10,"endCol":5,"startCol":1,"filename":"/Users/akumarakrishnan/Documents/dev/Sandbox/notes/liquid-haskell/flycheck_demo.hs"},"realSpan":true},[["Main.head","forall a##xo .\n{v : [a##xo] | 1 <= len v}\n-> a##xo"]]],[{"spanInfo":{"startLine":10,"endLine":10,"endCol":57,"startCol":14,"filename":"/Users/akumarakrishnan/Documents/dev/Sandbox/notes/liquid-haskell/flycheck_demo.hs"},"realSpan":true},[["lq_anf$##7205759403792802349","[GHC.Types.Char]"]]],[{"spanInfo":{"startLine":32,"endLine":32,"endCol":2,"startCol":1,"filename":"/Users/akumarakrishnan/Documents/dev/Sandbox/notes/liquid-haskell/flycheck_demo.hs"},"realSpan":true},[["Main.y","forall a##xo . a##xo"]]],[{"spanInfo":{"startLine":14,"endLine":14,"endCol":8,"startCol":1,"filename":"/Users/akumarakrishnan/Documents/dev/Sandbox/notes/liquid-haskell/flycheck_demo.hs"},"realSpan":true},[["Main.tryHead","forall a##xo .\n[a##xo]\n-> (GHC.Base.Maybe a##xo)"]]],[{"spanInfo":{"startLine":121,"endLine":121,"endCol":5,"startCol":1,"filename":"/Users/akumarakrishnan/Documents/dev/Sandbox/notes/liquid-haskell/flycheck_demo.hs"},"realSpan":true},[["Main.nats","[{VV : GHC.Types.Int | VV >= 0}]"]]]],"o_templs":[[{"spanInfo":{"startLine":137,"endLine":137,"endCol":32,"startCol":31,"filename":"/Users/akumarakrishnan/Documents/dev/Sandbox/notes/liquid-haskell/flycheck_demo.hs"},"realSpan":true},[[null,"lq_tmp$x##1931:GHC.Types.Int\n-> lq_tmp$x##1932:GHC.Types.Int\n   -> {lq_tmp$x##1934 : GHC.Types.Int^\"lq_tmp$x##1933\" | lq_tmp$x##1934 == lq_tmp$x##1931 - lq_tmp$x##1932}"]]],[{"spanInfo":{"startLine":33,"endLine":33,"endCol":19,"startCol":6,"filename":"/Users/akumarakrishnan/Documents/dev/Sandbox/notes/liquid-haskell/flycheck_demo.hs"},"realSpan":true},[["lq_anf$##7205759403792802355","{lq_tmp$x##1273 : [{lq_tmp$x##1284 : GHC.Integer.Type.Integer^\"lq_tmp$x##1283\" | $k_##1282[VV##1281:=lq_tmp$x##1284][lq_tmp$x##1277:=lq_anf$##7205759403792802351##d2h9][lq_tmp$x##1278:=lq_anf$##7205759403792802354##d2hc]}]<\\lq_tmp$x##1280 VV -> {lq_tmp$x##1284 : GHC.Integer.Type.Integer^\"lq_tmp$x##1283\" \"lq_tmp$x##1287\" | $k_##1286[VV##1285:=lq_tmp$x##1284][lq_tmp$x##1277:=lq_anf$##7205759403792802351##d2h9][lq_tmp$x##1278:=lq_anf$##7205759403792802354##d2hc][lq_tmp$x##1288:=lq_tmp$x##1280]}> | tail lq_tmp$x##1273 == lq_anf$##7205759403792802354##d2hc\nhead lq_tmp$x##1273 == lq_anf$##7205759403792802351##d2h9\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    && len lq_tmp$x##1273 == 1 + len lq_anf$##7205759403792802354##d2hc}"]]],[{"spanInfo":{"startLine":33,"endLine":33,"endCol":3,"startCol":1,"filename":"/Users/akumarakrishnan/Documents/dev/Sandbox/notes/liquid-haskell/flycheck_demo.hs"},"realSpan":true},[["Main.y'","GHC.Integer.Type.Integer"]]],[{"spanInfo":{"startLine":137,"endLine":137,"endCol":20,"startCol":13,"filename":"/Users/akumarakrishnan/Documents/dev/Sandbox/notes/liquid-haskell/flycheck_demo.hs"},"realSpan":true},[["lq_anf$##7205759403792802386","{lq_tmp$x##1909 : a##a2dG^\"lq_tmp$x##1908\" | $k_##1907[VV##1906:=lq_tmp$x##1909][lq_tmp$x##1904:=ds_d2gE]}"]]],[{"spanInfo":{"startLine":137,"endLine":137,"endCol":44,"startCol":37,"filename":"/Users/akumarakrishnan/Documents/dev/Sandbox/notes/liquid-haskell/flycheck_demo.hs"},"realSpan":true},[["lq_anf$##7205759403792802389","{lq_tmp$x##1947 : [{lq_tmp$x##1956 : a##a2dG^\"lq_tmp$x##1955\" | $k_##1954[VV##1953:=lq_tmp$x##1956][lq_tmp$x##1950:=ds_d2gE]}] | len ds_d2gE - 1 == len lq_tmp$x##1947}"]]],[{"spanInfo":{"startLine":136,"endLine":136,"endCol":5,"startCol":1,"filename":"/Users/akumarakrishnan/Documents/dev/Sandbox/notes/liquid-haskell/flycheck_demo.hs"},"realSpan":true},[["Main.take","forall a##a2dG .\nlq_tmp$x##1873:{v : GHC.Types.Int | v >= 0}\n-> lq_tmp$x##1874:{xs : [a##a2dG] | lq_tmp$x##1873 <= len xs}\n   -> {ys : [a##a2dG] | lq_tmp$x##1873 == len ys}"]]],[{"spanInfo":{"startLine":130,"endLine":130,"endCol":17,"startCol":12,"filename":"/Users/akumarakrishnan/Documents/dev/Sandbox/notes/liquid-haskell/flycheck_demo.hs"},"realSpan":true},[["lq_anf$##7205759403792802421","{lq_tmp$x##2625 : GHC.Types.Bool | lq_tmp$x##2625 <=> x##aWc < lq_anf$##7205759403792802420##d2ig}"]]],[{"spanInfo":{"startLine":121,"endLine":121,"endCol":54,"startCol":8,"filename":"/Users/akumarakrishnan/Documents/dev/Sandbox/notes/liquid-haskell/flycheck_demo.hs"},"realSpan":true},[["lq_anf$##7205759403792802405","{lq_tmp$x##2145 : GHC.Types.Int^\"lq_tmp$x##2144\" | lq_tmp$x##2145 == (-lq_anf$##7205759403792802404##d2i0)}"]]],[{"spanInfo":{"startLine":141,"endLine":141,"endCol":5,"startCol":1,"filename":"/Users/akumarakrishnan/Documents/dev/Sandbox/notes/liquid-haskell/flycheck_demo.hs"},"realSpan":true},[["Main.tail","forall a##a2b2 .\nlq_tmp$x##1396:{xs : [a##a2b2] | 1 <= len xs}\n-> {ys : [a##a2b2] | len lq_tmp$x##1396 - 1 == len ys}"]]],[{"spanInfo":{"startLine":130,"endLine":130,"endCol":26,"startCol":25,"filename":"/Users/akumarakrishnan/Documents/dev/Sandbox/notes/liquid-haskell/flycheck_demo.hs"},"realSpan":true},[[null,"lq_tmp$x##2669:GHC.Types.Int\n-> lq_tmp$x##2670:GHC.Types.Int\n   -> {lq_tmp$x##2672 : GHC.Types.Int^\"lq_tmp$x##2671\" | lq_tmp$x##2672 == lq_tmp$x##2669 - lq_tmp$x##2670}"]]],[{"spanInfo":{"startLine":1,"endLine":1,"endCol":1,"startCol":1,"filename":"/Users/akumarakrishnan/Documents/dev/Sandbox/notes/liquid-haskell/flycheck_demo.hs"},"realSpan":true},[["Main.$trModule","{VV##1623 : GHC.Types.Module^\"lq_tmp$x##1625\" | $k_##1624}"]]],[{"spanInfo":{"startLine":130,"endLine":130,"endCol":15,"startCol":14,"filename":"/Users/akumarakrishnan/Documents/dev/Sandbox/notes/liquid-haskell/flycheck_demo.hs"},"realSpan":true},[[null,"lq_tmp$x##2630:{lq_tmp$x##2635 : GHC.Types.Int^\"lq_tmp$x##2634\" | $k_##2633[VV##2632:=lq_tmp$x##2635][lq_tmp$x##2629:=GHC.Classes.$fOrdInt]}\n-> lq_tmp$x##2631:{lq_tmp$x##2635 : GHC.Types.Int^\"lq_tmp$x##2634\" | $k_##2633[VV##2632:=lq_tmp$x##2635][lq_tmp$x##2629:=GHC.Classes.$fOrdInt]}\n   -> {lq_tmp$x##2625 : GHC.Types.Bool | lq_tmp$x##2625 <=> lq_tmp$x##2630 < lq_tmp$x##2631}"]]],[{"spanInfo":{"startLine":137,"endLine":137,"endCol":34,"startCol":29,"filename":"/Users/akumarakrishnan/Documents/dev/Sandbox/notes/liquid-haskell/flycheck_demo.hs"},"realSpan":true},[["lq_anf$##7205759403792802388","{lq_tmp$x##1934 : GHC.Types.Int^\"lq_tmp$x##1933\" | lq_tmp$x##1934 == ds_d2gD - lq_anf$##7205759403792802387##d2hJ}"]]],[{"spanInfo":{"startLine":137,"endLine":137,"endCol":45,"startCol":23,"filename":"/Users/akumarakrishnan/Documents/dev/Sandbox/notes/liquid-haskell/flycheck_demo.hs"},"realSpan":true},[["lq_anf$##7205759403792802390","{ys : [{lq_tmp$x##1982 : a##a2dG^\"lq_tmp$x##1981\" | $k_##1980[VV##1979:=lq_tmp$x##1982][lq_tmp$x##1873:=lq_anf$##7205759403792802388##d2hK][lq_tmp$x##1874:=lq_anf$##7205759403792802389##d2hL]}] | lq_anf$##7205759403792802388##d2hK == len ys}"]]],[{"spanInfo":{"startLine":130,"endLine":130,"endCol":4,"startCol":1,"filename":"/Users/akumarakrishnan/Documents/dev/Sandbox/notes/liquid-haskell/flycheck_demo.hs"},"realSpan":true},[["Main.abs","lq_tmp$x##2613:GHC.Types.Int\n-> {n : GHC.Types.Int | 0 <= n}"]]],[{"spanInfo":{"startLine":10,"endLine":10,"endCol":19,"startCol":14,"filename":"/Users/akumarakrishnan/Documents/dev/Sandbox/notes/liquid-haskell/flycheck_demo.hs"},"realSpan":true},[[null,"lq_tmp$x##1115:[GHC.Types.Char]\n-> {lq_tmp$x##1125 : a##a2bx^\"lq_tmp$x##1124\" \"lq_tmp$x##72\" | $k_##1123[VV##1122:=lq_tmp$x##1125][lq_tmp$x##1114:=fix$36$$36$dIP_a2df]}"]]],[{"spanInfo":{"startLine":150,"endLine":150,"endCol":4,"startCol":1,"filename":"/Users/akumarakrishnan/Documents/dev/Sandbox/notes/liquid-haskell/flycheck_demo.hs"},"realSpan":true},[["Main.bad","(Main.OrdList GHC.Integer.Type.Integer)"]]],[{"spanInfo":{"startLine":130,"endLine":130,"endCol":35,"startCol":9,"filename":"/Users/akumarakrishnan/Documents/dev/Sandbox/notes/liquid-haskell/flycheck_demo.hs"},"realSpan":true},[["lq_anf$##7205759403792802422","{lq_tmp$x##2641 : GHC.Types.Bool | (lq_tmp$x##2641 <=> x##aWc < lq_anf$##7205759403792802420##d2ig)\n                                   && lq_tmp$x##2641 == lq_anf$##7205759403792802421##d2ih}"]]],[{"spanInfo":{"startLine":130,"endLine":130,"endCol":6,"startCol":5,"filename":"/Users/akumarakrishnan/Documents/dev/Sandbox/notes/liquid-haskell/flycheck_demo.hs"},"realSpan":true},[["x","GHC.Types.Int"]]],[{"spanInfo":{"startLine":149,"endLine":149,"endCol":5,"startCol":1,"filename":"/Users/akumarakrishnan/Documents/dev/Sandbox/notes/liquid-haskell/flycheck_demo.hs"},"realSpan":true},[["Main.good","(Main.OrdList GHC.Integer.Type.Integer)"]]],[{"spanInfo":{"startLine":130,"endLine":130,"endCol":28,"startCol":23,"filename":"/Users/akumarakrishnan/Documents/dev/Sandbox/notes/liquid-haskell/flycheck_demo.hs"},"realSpan":true},[["lq_anf$##7205759403792802423","{lq_tmp$x##2655 : GHC.Types.Int | lq_tmp$x##2655 == 0}"]]],[{"spanInfo":{"startLine":137,"endLine":137,"endCol":35,"startCol":23,"filename":"/Users/akumarakrishnan/Documents/dev/Sandbox/notes/liquid-haskell/flycheck_demo.hs"},"realSpan":true},[["Main.take","forall a##a2dG .\nlq_tmp$x##1873:{v : GHC.Types.Int | v >= 0}\n-> lq_tmp$x##1874:{xs : [a##a2dG] | lq_tmp$x##1873 <= len xs}\n   -> {ys : [a##a2dG] | lq_tmp$x##1873 == len ys}"]]],[{"spanInfo":{"startLine":32,"endLine":32,"endCol":13,"startCol":6,"filename":"/Users/akumarakrishnan/Documents/dev/Sandbox/notes/liquid-haskell/flycheck_demo.hs"},"realSpan":true},[["lq_anf$##7205759403792802350","{lq_tmp$x##1183 : [{lq_tmp$x##1188 : a##a2dj^\"lq_tmp$x##1187\" | $k_##1186[VV##1185:=lq_tmp$x##1188]}]<\\lq_tmp$x##1184 VV -> {lq_tmp$x##1188 : a##a2dj^\"lq_tmp$x##1187\" \"lq_tmp$x##1191\" | $k_##1190[VV##1189:=lq_tmp$x##1188][lq_tmp$x##1192:=lq_tmp$x##1184]}> | len lq_tmp$x##1183 == 0}"]]],[{"spanInfo":{"startLine":10,"endLine":10,"endCol":5,"startCol":1,"filename":"/Users/akumarakrishnan/Documents/dev/Sandbox/notes/liquid-haskell/flycheck_demo.hs"},"realSpan":true},[["Main.head","forall a##a2bx .\nlq_tmp$x##825:{xs : [a##a2bx] | 1 <= len xs}\n-> a##a2bx"]]],[{"spanInfo":{"startLine":10,"endLine":10,"endCol":57,"startCol":14,"filename":"/Users/akumarakrishnan/Documents/dev/Sandbox/notes/liquid-haskell/flycheck_demo.hs"},"realSpan":true},[["lq_anf$##7205759403792802349","{lq_tmp$x##1093 : [GHC.Types.Char] | lq_tmp$x##1093 ~~ lq_anf$##7205759403792802348##d2h6\n                                     && len lq_tmp$x##1093 == strLen lq_anf$##7205759403792802348##d2h6}"]]],[{"spanInfo":{"startLine":32,"endLine":32,"endCol":2,"startCol":1,"filename":"/Users/akumarakrishnan/Documents/dev/Sandbox/notes/liquid-haskell/flycheck_demo.hs"},"realSpan":true},[["Main.y","forall a##a2dj . a##a2dj"]]],[{"spanInfo":{"startLine":14,"endLine":14,"endCol":8,"startCol":1,"filename":"/Users/akumarakrishnan/Documents/dev/Sandbox/notes/liquid-haskell/flycheck_demo.hs"},"realSpan":true},[["Main.tryHead","forall a##a2bt .\nlq_tmp$x##1317:[a##a2bt]\n-> (GHC.Base.Maybe a##a2bt)"]]],[{"spanInfo":{"startLine":121,"endLine":121,"endCol":5,"startCol":1,"filename":"/Users/akumarakrishnan/Documents/dev/Sandbox/notes/liquid-haskell/flycheck_demo.hs"},"realSpan":true},[["Main.nats","[{VV##0 : GHC.Types.Int | VV##0 >= 0}]"]]]],"o_bots":[],"o_result":{"tag":"Unsafe","contents":[{"msg":"Liquid Type Mismatch\n  Inferred type\n    VV : GHC.Types.Int\n \n  not a subtype of Required type\n    VV : {VV : GHC.Types.Int | VV >= 0}\n ","pos":{"spanInfo":{"startLine":121,"endLine":121,"endCol":5,"startCol":1,"filename":"/Users/akumarakrishnan/Documents/dev/Sandbox/notes/liquid-haskell/flycheck_demo.hs"},"realSpan":true}},{"msg":"Liquid Type Mismatch\n  Inferred type\n    VV : {v : [a##xo] | len v == 0\n                        && len v >= 0\n                        && v == ?a}\n \n  not a subtype of Required type\n    VV : {VV : [a##xo] | 1 <= len VV}\n \n  In Context\n    ?a : {?a : [a##xo] | len ?a == 0\n                         && len ?a >= 0}","pos":{"spanInfo":{"startLine":32,"endLine":32,"endCol":13,"startCol":6,"filename":"/Users/akumarakrishnan/Documents/dev/Sandbox/notes/liquid-haskell/flycheck_demo.hs"},"realSpan":true}},{"msg":"Liquid Type Mismatch\n  Inferred type\n    VV : GHC.Integer.Type.Integer\n \n  not a subtype of Required type\n    VV : {VV : GHC.Integer.Type.Integer | 15 <= VV}\n ","pos":{"spanInfo":{"startLine":150,"endLine":150,"endCol":4,"startCol":1,"filename":"/Users/akumarakrishnan/Documents/dev/Sandbox/notes/liquid-haskell/flycheck_demo.hs"},"realSpan":true}}]}}