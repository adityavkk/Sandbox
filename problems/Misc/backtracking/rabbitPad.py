"""
You are given a phone keypad (1-2-3;4-5-6;7-8-9;x-0-x) and a rabbit that moves like a knight
from chess, write a program that given two inputs, (int k, int n) outputs the
total number of possible combinations of phone numbers length k that can be
generated by moving the rabbit starting at the number n.
"""

"""
1 2 3
4 5 6
7 8 9
x 0 x

Exhaustive search
f :: K -> N -> Int
- if k = 0: 0
- if k = 1: number of moves that lead to a number from position n
- sum over calling (f on all possible moves from position n with (k - 1) digits)
"""
from functools import lru_cache

@lru_cache(maxsize = None)
def f(k, n):
    if k == 0:
        return 0
    ms =  movesFrom(n)
    if k == 1:
        return len(ms)
    return sum(f(k - 1, m) for m in ms)

def movesFrom(n):
    moves = { 1: [6, 8],
              2: [7, 9],
              3: [4, 8],
              4: [9, 0, 3],
              5: [5, 9, 7],
              6: [0, 7, 1],
              7: [2, 6, 5, 7],
              8: [1, 3],
              9: [4, 2, 9, 5],
              0: [4, 6] }
    return moves[n]
